/*

@media only screen and (max-width: 600px) {
    #filters {
        display:flex;
        flex-direction: column;

    }
}


@media only screen and (min-width: 600px) and (max-width: 768px) {
    #filters {
        display:flex;
        flex-direction: column;

    }
}



@media only screen and (min-width: 769px) and (max-width: 1200px) {
    #filters {
        display:flex;
        flex-direction: column;

    }

}
*/

body {
    font-size: 1em;
}


/*
Filters is where we have two search bar and checkbox-wrapper
I want them to be aligned horizontally (flex-direciotn: row) and once there is no space
for the checkboxes, then they should end up below the search bar (flex-wrap: wrap).
*/
#filters {

    /* The important part: */
    display:flex;
    flex-direction: row;
    flex-wrap: wrap;

    /* Aligning items so it looks better*/
    align-items: flex-center;
}





/* 
BUT...

the checkboxes might still not have space horizontally

so we neeed to make sure the checkboxes stack vertically

once the screen is too narrow.



*/
#filters #checkboxes {

    /* The important part: */
    display:flex;
    flex-direction: row;
    flex-wrap: wrap;

    /* Aligning items so it looks better*/
    align-items: flex-center;

    
}

#filters #checkboxes .filter-button {

    /* adding some space between checkboxes, some breathing room */
    margin-left: 10px;
}

/* In case you want a button (like a resert filters button or something*/
#filters button {
    background-color: black;
    color: white;

}

/* 

search bar should be 2 em, otherwise it risks becomign too large vertically 

it's 500px because I want some fixed width. It interacts well with the fixed width
of the filters.

also

to make it fit with the theme I make I change its colors and borders.



*/
#search-field {
    height: 2em;
    width: 500px;
    

    background-color: black;
    color: white;
}

/*
Decided to make this semi-fixed to make it more predictable.
Of course, some checkbox labels might be longer text, I will have
to go back here and either increase the max-width or remove constraints.
*/
.checkbox-wrapper{
    
    min-width: 150px;
    max-width: 250px;
}


/* ------------ Transition effect ------------ */

#filters button {
    transition-duration: 1000ms;
}
  
#filters button:hover {
    color: rgb(91, 172, 91)
}


/* -------------------------------------------- art panel */

/*
Maybe a bit of a confusing name. But I call the
image and its corresponding information text an art panel.

The combination display flex and flex-direction: column
allows the contents of art-panel to stack vertically, as 
if there is a column holding them together on the sides.
*/

.art-panel {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 10px;
    background: 
                radial-gradient(ellipse farthest-corner at center top, #FFFFFF 0%, #FFFFAC 8%, #D1B464 25%, #5d4a1f 62.5%, #5d4a1f 100%);

    box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;

}



/* I will control the width in with css grid, when I specify 
that the art panels should be put in equally sized columns */
.art-panel {
    width: 100%;
    height: 100%;    
}


/*
object fit contain allows the image to retain its dimensions. 
*/
.art-panel img {
    width: 100%;

    object-fit: cover; 
    min-height: 300px;
    max-height: 300px;

    min-width: 300px;
   
  
}

/*
Basic styling for title.
*/
.art-panel .title {
    font-size: 18px;
    font-weight: bold;
    text-align: center;
    margin-top: 10px;

}

/*
This is the text that goes below the image
*/
.art-panel .description {
    text-align: center;
    font-size: 16px;
    margin-top: 0px;


}



.art-panel {
    position: relative;


}


/*
This one might be worth commenting on. Notice
the z-index being 1, and z-index of .art-panel img
being 0.

this is so that the info is always on top.

and also, I wanted the info that belongs to an image
to be displayed on top of it, 

which is why I use absolute positioning here.

*/
.art-info {
    position: absolute;
    box-sizing: border-box;
    z-index: 1;
    bottom: 0px;
    background-color: #D1B464;
    color: rgb(14, 14, 14);
    opacity: 100%;
    width: calc(100% - 20px);
    
  
    padding-bottom: 10px;
    padding-right: 10px;
    padding-left: 10px;
    margin:10px;

    box-shadow:none;
    
}

.art-info .description {

    display:none;


}


.art-panel:hover .art-info .description{
    display:block;

}


.art-panel img {
    z-index: 0;
}

/* -------------------------------------------- grid */

/*
All art-panels are placed in
<div class="grid-container">
*/
.grid-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: auto;

    grid-gap: 10px;

}

/*
For the smallest screens.. show images in ONE column.
*/
@media only screen and (max-width: 600px) {
    .grid-container {
        grid-template-columns: repeat(1, 1fr);
        grid-template-rows: repeat(auto, 1fr);
    }
}

/*
Smaller screens means two equally 
sized columns ( = two images per row)
*/
@media only screen and (min-width: 600px) and (max-width: 768px) {
    .grid-container {
        grid-template-columns: repeat(2, 1fr);
        grid-template-rows: auto;
    }
}


/*
On medium screens, grid should have three 
equally sized columns (= 3 images per row).
*/
@media only screen and (min-width: 769px) and (max-width: 1200px) {
    .grid-container {
        grid-template-columns: repeat(2, 1fr);
        grid-template-rows: repeat(auto, 1fr);
    }

}




.description {
    opacity: 100%;

}


.more-info {

    text-decoration: none;
    color: black;
}

.more-info:hover {

    text-decoration: none;
    color: white;
}

/* -------------------------------------------- images */

/*
Just trying to make it clear that 
you can click on the image (to
open it in new tab).
*/

.art-panel img {
    cursor: pointer;
}

/* -------------------------------------------- for js */

/*
These were supposed to be the default 
transform origins. But I set these dynamically now
in the js file, for example:

$(".art-panel:nth-child(7):visible").css("transform-origin", "bottom left");

As you can see above. The 7-th art panel 
gets its tranform-origin set to bottom left
which means when it scales up, 
it scaled upwards and to the right. 

Which makes sense if the image is 
on the bottom left corner.


*/

.js-top-left {
    transform-origin: top left;
}

.js-top-center {
    transform-origin: top center;
}

.js-top-right {
    transform-origin: top right;
}

.js-bottom-left {
    transform-origin: bottom left;
}

.js-bottom-center {
    transform-origin: bottom center;
}

.js-bottom-right {
    transform-origin: bottom right;
}


/* -------------------------------------------- for tags */
.hidden-text {
    display: none;
}
